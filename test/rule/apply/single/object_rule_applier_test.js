// Generated by LiveScript 1.2.0
(function(){
  var rule, ObjectRuleApplier, fixtures, User, Book, createApplier;
  require('../../../test_setup');
  rule = require('../../../../index');
  ObjectRuleApplier = rule.apply.single.ObjectRuleApplier;
  fixtures = require('../../../fixtures');
  User = fixtures.user;
  Book = fixtures.book;
  createApplier = function(rules, name, context, debug){
    debug == null && (debug = true);
    return new ObjectRuleApplier(rules, name, context, debug);
  };
  describe('ObjectRuleApplier', function(){
    var applier, ctx, object;
    context('invalid', function(){
      return specify('throws', function(){
        return expect(createApplier({}, void 8)).to['throw'];
      });
    });
    return context('valid', function(){
      before(function(){
        ctx = {
          action: {
            edit: function(){
              return this.ucan('read', 'book');
            }
          }
        };
        return object = {
          action: 'edit'
        };
      });
      specify('ok', function(){
        return expect(createApplier(ctx, object)).to.not['throw'];
      });
      return describe('rules', function(){
        beforeEach(function(){
          return applier = createApplier(ctx, object);
        });
        return specify('are set', function(){
          return expect(applier.rules).to.eql(ctx);
        });
      });
    });
  });
}).call(this);
